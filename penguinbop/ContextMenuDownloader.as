class ContextMenuDownloader{	private static var _INST:Object = new Object ();	private static var _UrlBasename:String = new String ();	private static var _ShowDefaults:Boolean = new Boolean (true);	private static var _DownloadSourceFLA = new Boolean (false);	private static var _OptionalDownloads:Object = new Object ();	private static var _ContextMenu:ContextMenu;	private static var _loaded:Boolean = new Boolean(false);	private static var _OptionalFunctions:Object = new Object();	/* * * * * * * * BEGIN SINGLETON CONSTRUCTOR * * * * * * */		public static function get instance ()	{				if (_loaded == false) _INST = new ContextMenuDownloader ();		_loaded = true;		return _INST;	}		private function ContextMenuDownloader ()	{		_ContextMenu = new ContextMenu (menuHandler);		// Handle Context Menu		var url_str = _root._url;		var url_array = url_str.split ("/");		var url_filename = url_array.pop ();		var url_file_array = url_filename.split (".");		_UrlBasename = url_file_array.slice (0, url_file_array.length - 1);		_ContextMenu.customItems.push (new ContextMenuItem ("Download Source FLA", downloadSourceHandler));		_root.menu = _ContextMenu;			}// end Constructor	/* * * * * * * * PUBLIC METHODS  * * * * * * */	public function addDownload (targetLabel:String, targetURL:String)	{		_OptionalDownloads[targetLabel] = targetURL;		_ContextMenu.customItems.push (new ContextMenuItem (targetLabel, downloadURLHandler));	}		public function addFunction (targetLabel:String, callback:Function)	{		_OptionalFunctions[targetLabel] = callback;		var startMenuItem:ContextMenuItem = new ContextMenuItem (targetLabel, functionHandler);		_ContextMenu.customItems.push (startMenuItem);	}		/* * * * * * * * GETS AND SETS * * * * * * */		public function set downloadSource (newVal:Boolean):Void	{		_DownloadSourceFLA = newVal;	}		public function set downloadSourceMessage (newVal:String):Void	{		_ContextMenu.customItems[0].caption = newVal;	}		public function set showDefaults (newVal:Boolean):Void	{		_ShowDefaults = newVal;	}		/* * * * * * * * PRIVATE METHODS * * * * * * */		private function menuHandler (obj, menuObj)	{		if (_ShowDefaults == false)		{			menuObj.hideBuiltInItems ();		}		menuObj.customItems[0].visible = (_DownloadSourceFLA == true) ? true : false;	}		private function downloadSourceHandler (obj, item)	{		trace ("Downloading " + _UrlBasename + ".fla.");		_root.getURL (_UrlBasename + ".fla","_blank");	}		private function downloadURLHandler (obj, item)	{		_root.getURL (_OptionalDownloads[item.caption],"_blank");	}		private function functionHandler (obj, item)	{		_OptionalFunctions[item.caption]();	}	}// end Class