package org.tomasino.labs.cipher.vic{	import org.tomasino.encoding.SequentialSubstitution;	import org.tomasino.encoding.DigitMath;	import org.tomasino.encoding.LaggedFibonacciGenerator;		public class VIC	{		private static const COMMON_KEY:Array = new Array ('A', 'T', ' ', 'O', 'N', 'E', ' ', 'S', 'I', 'R');		private static const ROW_2:Array      = new Array ('B', 'D', 'G', 'J', 'L', 'P', 'U', 'W', 'Y', '.');		private static const ROW_3:Array      = new Array ('C', 'F', 'H', 'K', 'M', 'Q', 'V', 'X', 'Z', '#');				// Series from Key Phrase		private var _s1:Array;		private var _s2:Array;				// Message Identifier		private var _mi:Array;		private var _date:Array;				// 5D Date expanded to 10 + S1 =		private var _g:Array;				// Substitution 1234567890 with G =		private var _t:Array;				// T expanded to 50 (5 rows of 10)		private var _u:Array;				// Header for straddling checkerboard		private var _c:Array;				private var _firstTrans:int;		private var _secondTrans:int;				// Transposition Keys		private var _k1:Array;		private var _k2:Array;				public function VIC (song:String, MI:int, keyDate:Date, personalID:int):void		{			/* Begin with seeds for Straddling Checkerboard */							// A T   O N E   S I R				// 6-8 Digit Date (1-2 digit day, 1-2 digit month, 4 digit year)				// 20 Character phrase				// Random Indicator Group							// Build _s1 & _s2 from song & sequentializing			var regex:RegExp = /[^A-Za-z0-9]/g;			var songArr:Array = song.toUpperCase().replace(regex, '').split('');			var s1:Array = songArr.slice(0,10)			var s2:Array = songArr.slice(10,20);						_s1 = SequentialSubstitution.substitute (s1);			_s2 = SequentialSubstitution.substitute (s2);						// Choose a random 5-digit message identifier, MI.			_mi = String(MI).split('').slice(0,5);						// Subtract, without borrowing, the first five digits of the key date (39175) from MI.			var dateString:String = String(keyDate.getDate()) + String(keyDate.getMonth() + 1) + String(keyDate.getFullYear());			_date = dateString.split('').slice(0,5);			var miDateDiff:Array = DigitMath.subtract(_mi, _date);						// Through chain addition, expand the resulting five digits to ten, and add these digits to S1 (without carrying) to obtain G.						miDateDiff = LaggedFibonacciGenerator.generate(miDateDiff, 10);			_g = DigitMath.sum( _s1, miDateDiff );						// Below S2, write the sequence 1234567890. Locate each digit of G in the sequence 1234567890 and replace it with the digit directly above it in S2. The result is T.			_t = new Array();			for each (var index:int in _g) 			{				_t.push (_s2[index - 1]);			}						// Use chain addition to expand T by 50 digits. These digits, in five rows of ten, form the U block.			var uSource:Array = _t.concat();			uSource = LaggedFibonacciGenerator.generate(uSource, 60);						_u = new Array();			for (var i:int = 0; i < 5 ; i++)			{				var sliceIndex:int = 10 * (i+1);				_u[i] = uSource.slice(sliceIndex, sliceIndex + 10);			}									// The last two non-equal digits of the U block are individually added to the agent's personal number to give the widths of the two transpositions.			if (personalID > 16) throw new ArgumentError ('PersonalID cannot exceed 16');			_secondTrans = personalID + _u[4][9];			for (i = 8; i >= 0; i--)			{				if (_u[4][9] != _u[4][i])				{					_firstTrans = personalID + _u[4][i];					break;				}			}						// Sequentialize T and use this sequence to copy off the columns of the U block, from top to bottom, into a new row of digits.						var seqT:Array = SequentialSubstitution.substituteIntegers( _t );			var columnU:Array = new Array ();						for (i = 1; i <= 10; ++i)			{				var columnIndex:int = seqT.indexOf(i % 10);				for (var j:int = 0; j < _u.length; ++j)				{					columnU.push ( _u[j][columnIndex] );				}			}						_k1 = SequentialSubstitution.substituteIntegers(columnU.slice(0, _firstTrans), false);			_k2 = SequentialSubstitution.substituteIntegers(columnU.slice(_firstTrans, _firstTrans + _secondTrans), false);						// Sequentialize the last row of the U block to get C, the column headers for the straddling checkerboard.			_c = SequentialSubstitution.substitute( _u[4] );			// Output for testing			trace ('  _s1:',_s1);			trace ('  _s2:',_s2);			trace ('  _mi:',_mi);			trace ('_date:',_date);			trace ('   _g:',_g);			trace ('   _t:',_t);			for (i = 0; i < _u.length; ++i)			{				trace ('_u['+i+']:',_u[i]);			}			trace ('_firstTrans:',_firstTrans);			trace ('_secondTrans:',_secondTrans);			trace ('  _k1:',_k1);			trace ('  _k2:',_k2);		}						// Methods				/* Chain Addition - Lagged Fibonacci */		/*					var testInt:int = 12345;			var testArray:Array = [1,2,3,4,5];						var fromInt:Array = LaggedFibonacciGenerator.generateFromInt( testInt, 20 );			var fromArray:Array = LaggedFibonacciGenerator.generate( testArray, 20 );						trace ('Testing Integers -', fromInt.join(''));			trace ('Testing Arrays   -', fromArray.join(''));		*/				/* Sequentialize */		/*			var testString:String = 'James Tomasino';			var testArray:Array = testString.toUpperCase().replace(' ', '').split('');						var sub:Array = SequentialSubstitution.substitute ( testArray );			trace (sub);		*/	}}