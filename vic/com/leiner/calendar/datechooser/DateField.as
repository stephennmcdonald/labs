package com.leiner.calendar.datechooser {	import flash.display.Sprite;	import flash.geom.Rectangle;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.TextFormat;	import flash.events.Event;	/**	 * ...	 * @author ...Carl Leiner	 */	public class DateField extends Sprite	{		/* STYLE ELEMENTS */		public static var fieldAlpha:Number = 1;		public static var fieldColor:int = 0xFFFFFF;		public static var topBoarderColor:int = 0x6D6F70;		public static var rightBoarderColor:int = 0xC9CBCC;		public static var bottomBoarderColor:int = 0xD3D5D6;		public static var leftBoarderColor:int = 0xC9CBCC;				/* FILED DIMENSIONS */		public static var fieldWidth:int = 80;		public static var fieldHeight:int = 20;						public static var format:TextFormat=new TextFormat('Helvetica',12,0x333333);		private var t:TextField;		public function get text():String { return t.text;}		public function set text(tx:String):void { t.text = tx; }		public function get textField():TextField { return t; }				public function DateField() {			if (stage) init();			else			addEventListener(Event.ADDED_TO_STAGE, init);		}				public function init(e:Event=null):void {			removeEventListener(Event.ADDED_TO_STAGE, init);			drawField();			configUI();		}		protected function configUI():void {			t = new TextField();						t.autoSize = TextFieldAutoSize.LEFT;			addChild(t);			t.width = fieldWidth;			t.height = fieldHeight;			format.align = 'center'			format.leftMargin = format.rightMargin = 5;			t.defaultTextFormat = DateField.format;			t.text 		= "Select Date";			t.y = fieldHeight-t.height>>1;			var grid:Rectangle = new Rectangle(1, 1, fieldWidth - 2, fieldHeight - 2);			this.scale9Grid = grid;		}				protected function drawField():void {			this.graphics.clear();			this.graphics.beginFill(fieldColor,fieldAlpha);			this.graphics.drawRect(0, 0, fieldWidth,fieldHeight);			this.graphics.endFill();			this.graphics.lineStyle(1, topBoarderColor, 1);			this.graphics.moveTo(0, 0);			this.graphics.lineTo(fieldWidth, 0);			this.graphics.lineStyle(1, rightBoarderColor, 1);			this.graphics.lineTo(fieldWidth, fieldHeight);			this.graphics.lineStyle(1, bottomBoarderColor, 1);			this.graphics.lineTo(0, fieldHeight);			this.graphics.lineStyle(1, leftBoarderColor, 1);			this.graphics.lineTo(0, 1);		}			}}