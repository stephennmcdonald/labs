package com.leiner.calendar.datechooser{	import com.leiner.events.EventsManager;	import com.leiner.calendar.calendar.Calendar;	import flash.display.Bitmap;	import flash.display.Sprite;	import flash.display.Shape;	import flash.events.Event;	import flash.events.FocusEvent;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;	import flash.text.TextFormat;	import flash.text.Font;	import flash.utils.getQualifiedClassName;	public class DateChooser extends Sprite	{		public static var format = new TextFormat('_sans',11,0x333333);		public static var overformat = new TextFormat('_sans',11,0x333333);		public static var todayFormat = new TextFormat('_sans',11,0xffffff,true);		public static var weekendFormat = new TextFormat('_sans',11,0x333333);		public static var weekDayFormat = new TextFormat('_sans',9,0xff3300,true);		public static var cellWidth:Number = 18;		public static var cellHeight:Number = 13;		public static var weekDayDisplayMode = 1;//-1-full.1-1letter, 3-3letter		public static var headerButtonSize = 15;		public static var headerHeight = 17;		public static var headerMonthDisplayMode = 3;		public static var headerFormat = new TextFormat('_sans',11,0x0);		private var mgr:EventsManager;		private var app:String = getQualifiedClassName(this) + Math.random() * 2000;;		private var calendar:Calendar;		private var dateField:DateField;		private var calendarIcon:Sprite;		private var _selectedDate:Date;		private var currentDateText:String;		public function DateChooser ():void		{			_selectedDate = new Date();			visible = false;			if (stage)			{				init ();			}			else			{				addEventListener ( Event.ADDED_TO_STAGE,init);			}		}		private function init ( e:Event = null ):void		{			removeEventListener ( Event.ADDED_TO_STAGE,init );			mgr = EventsManager.getInstance();			mgr.add ([app], this, Event.REMOVED_FROM_STAGE, cleanup);			setUI ();			visible = true;		}		private function setUI ():void		{			Calendar.format = format;			Calendar.overformat = overformat;			Calendar.todayFormat = todayFormat;			Calendar.weekendFormat = weekendFormat;			Calendar.weekDayDisplayMode = weekDayDisplayMode;//-1-full.1-1letter, 3-3letter			Calendar.weekDayFormat = weekDayFormat;			Calendar.cellWidth = cellWidth;			Calendar.cellHeight = cellHeight;			Calendar.headerButtonSize = headerButtonSize;			Calendar.headerHeight = headerHeight;			Calendar.headerMonthDisplayMode = headerMonthDisplayMode;			Calendar.headerFormat = headerFormat;			calendar = new Calendar();			calendar.visible = false;			addChild ( calendar );			mgr.add ( [app], calendar, Event.SELECT, dateChange );			calendar.date = _selectedDate;			calendarIcon = new Sprite();			calendarIcon.addChild ( new Bitmap ( new Icon ( 0,0 ) ) );			addChild (calendarIcon);			dateField = new DateField();			addChild (dateField);			dateField.text = formatDate (_selectedDate);			dateField.textField.type = 'input';			dateField.textField.restrict = '0-9/';						mgr.add ([app], dateField.textField, KeyboardEvent.KEY_DOWN, enterAction);			mgr.add ([app], dateField.textField, FocusEvent.FOCUS_IN, dateFocusIn);			mgr.add ([app], dateField.textField, FocusEvent.FOCUS_OUT, dateFocusOut);			mgr.registerButton (calendarIcon,[app],{click:showCalendar});			calendarIcon.x = dateField.width + 5;			calendarIcon.y = dateField.height - calendarIcon.height >> 1;			calendar.x = calendarIcon.x + calendarIcon.width + 5;		}		private function enterAction (e:KeyboardEvent):void		{			if (e.keyCode == 13)			{				dateFocusOut (null);			}		}		private function dateFocusIn (e:Event):void		{			currentDateText = dateField.text;			dateField.text = '';		}		private function dateFocusOut (e:Event):void		{			if (new Date(dateField.text).toString() == 'Invalid Date')			{				dateField.text = currentDateText;			}			else			{				calendar.date = this.date = new Date(dateField.text);				dispatchEvent (new Event (Event.CHANGE) );			}		}		public function set date (val:Date):void		{			dateField.text = formatDate(val);			calendar.date = val;			this._selectedDate = val;			calendar.selectedDate = val;		}		public function get selectedDate ():Date		{			return _selectedDate;		}				public function set selectedDate (value:Date):void		{			if (_selectedDate != value)			{				_selectedDate = value;				dispatchEvent (new Event (Event.CHANGE) );			}		}		private function showCalendar (e:MouseEvent)		{			calendar.visible = ! calendar.visible;		}		private function dateChange (e:Event):void		{			e.target.visible = false;			this._selectedDate = e.target.selectedDate;			dateField.text = formatDate(this._selectedDate);			dispatchEvent (new Event(Event.CHANGE));		}				private function formatDate (date: Date):String		{			var m = date.month + 1;			return ( (m < 10) ? '0' + m : m) + '/' + ((date.date < 10) ? '0' + date.date : date.date) + '/' + date.fullYear;		}		private function cleanup (e:Event):void		{			mgr.removeGroup (app);		}	}}